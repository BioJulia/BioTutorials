import{_ as l,c as e,o as n,j as s,az as t,a as i}from"./chunks/framework.aIw77uuq.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rosalind/02-rna.md","filePath":"rosalind/02-rna.md","lastUpdated":null}'),p={name:"rosalind/02-rna.md"},o={class:"warning custom-block"},h={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},r={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.817ex",height:"1.441ex",role:"img",focusable:"false",viewBox:"0 -626 361 637","aria-hidden":"true"},d={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},c={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},g={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.817ex",height:"1.441ex",role:"img",focusable:"false",viewBox:"0 -626 361 637","aria-hidden":"true"},u={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},b={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},y={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.817ex",height:"1.441ex",role:"img",focusable:"false",viewBox:"0 -626 361 637","aria-hidden":"true"},x={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.817ex",height:"1.441ex",role:"img",focusable:"false",viewBox:"0 -626 361 637","aria-hidden":"true"};function E(v,a,w,C,Q,A){return n(),e("div",null,[a[26]||(a[26]=s("h2",{id:"Problem-2:-Transcription",tabindex:"-1"},[i("‚úçÔ∏è Problem 2: Transcription "),s("a",{class:"header-anchor",href:"#Problem-2:-Transcription","aria-label":'Permalink to "‚úçÔ∏è Problem 2: Transcription {#Problem-2:-Transcription}"'},"‚Äã")],-1)),a[27]||(a[27]=s("p",null,[i("ü§î "),s("a",{href:"https://rosalind.info/problems/rna/",target:"_blank",rel:"noreferrer"},"Problem link")],-1)),s("div",o,[a[23]||(a[23]=s("p",{class:"custom-block-title"},"The Problem",-1)),a[24]||(a[24]=s("p",null,"An RNA string is a string formed from the alphabet containing 'A', 'C', 'G', and 'U'.",-1)),s("p",null,[a[8]||(a[8]=i("Given a DNA string ")),s("mjx-container",h,[(n(),e("svg",r,a[0]||(a[0]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})])])],-1)]))),a[1]||(a[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"t")])],-1))]),a[9]||(a[9]=i(" corresponding to a coding strand, its transcribed RNA string ")),s("mjx-container",d,[(n(),e("svg",c,a[2]||(a[2]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D462",d:"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1)]))),a[3]||(a[3]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"u")])],-1))]),a[10]||(a[10]=i(" is formed by replacing all occurrences of 'T' in ")),s("mjx-container",k,[(n(),e("svg",g,a[4]||(a[4]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})])])],-1)]))),a[5]||(a[5]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"t")])],-1))]),a[11]||(a[11]=i(" with 'U' in ")),s("mjx-container",u,[(n(),e("svg",m,a[6]||(a[6]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D462",d:"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1)]))),a[7]||(a[7]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"u")])],-1))]),a[12]||(a[12]=i("."))]),s("p",null,[a[15]||(a[15]=s("em",null,"Given",-1)),a[16]||(a[16]=i(": A DNA string ")),s("mjx-container",b,[(n(),e("svg",y,a[13]||(a[13]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})])])],-1)]))),a[14]||(a[14]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"t")])],-1))]),a[17]||(a[17]=i(" having length at most 1000 nt."))]),s("p",null,[a[20]||(a[20]=s("em",null,"Return",-1)),a[21]||(a[21]=i(": The transcribed RNA string of ")),s("mjx-container",x,[(n(),e("svg",T,a[18]||(a[18]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})])])],-1)]))),a[19]||(a[19]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"t")])],-1))]),a[22]||(a[22]=i("."))]),a[25]||(a[25]=t('<p><strong>Sample Dataset</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GATGGAACTTGACTACGTAAATT</span></span></code></pre></div><p><strong>Sample Output</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GAUGGAACUUGACUACGUAAAUU</span></span></code></pre></div>',4))]),a[28]||(a[28]=t(`<h3 id="Approach-1-string-replace" tabindex="-1">Approach 1 - string <code>replace()</code> <a class="header-anchor" href="#Approach-1-string-replace" aria-label="Permalink to &quot;Approach 1 - string \`replace()\` {#Approach-1-string-replace}&quot;">‚Äã</a></h3><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input_dna </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GATGGAACTTGACTACGTAAATT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GAUGGAACUUGACUACGUAAAUU&quot;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;GAUGGAACUUGACUACGUAAAUU&quot;</span></span></code></pre></div><p>This one is pretty straightforward, as described. All we need to do is replace any <code>&#39;T&#39;</code>s with <code>&#39;U&#39;</code>s. Happily, julia has a handy <code>replace()</code> function that takes a string, and a <code>Pair</code> that is <code>pattern =&gt; replacement</code>. In principle, the pattern can be a literal <code>String</code>, or even a regular expression. But here, we can just use a <code>Char</code>.</p><p>I&#39;ll also write the function using julia&#39;s one-line function definition syntax:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input_dna </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GATGGAACTTGACTACGTAAATT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">simple_transcribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seq) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seq, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;T&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;U&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@assert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> simple_transcribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_dna) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> answer</span></span></code></pre></div><p>As always, there are lots of ways you <em>could</em> do this. This function won&#39;t hanndle poorly formatted sequences, for example. Or rather, it will handle them, even though it shouldn&#39;t:</p><h3 id="Approach-2-BioSequences-LongRNA" tabindex="-1">Approach 2 - BioSequences <code>LongRNA</code> <a class="header-anchor" href="#Approach-2-BioSequences-LongRNA" aria-label="Permalink to &quot;Approach 2 - BioSequences \`LongRNA\` {#Approach-2-BioSequences-LongRNA}&quot;">‚Äã</a></h3><p>As you might expect, <code>BioSequences.jl</code> has a way to do this as well. <code>BioSequences.jl</code> doesn&#39;t just use a <code>String</code> to represent sequences, there are special types that can efficiently encode nucleic acid or amino acid sequences. In some cases, eg DNA or RNA with no ambiguous bases, using as few as 2 bits per base.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BioSequences</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dna_seq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LongDNA{2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_dna)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">simple_transcribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LongDNA{N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LongRNA{N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seq)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rna_seq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> simple_transcribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dna_seq)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>23nt RNA Sequence:</span></span>
<span class="line"><span>GAUGGAACUUGACUACGUAAAUU</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@assert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rna_seq) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> answer</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simple_transcribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This Is QUITE silly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;Uhis Is QUIUE silly&quot;</span></span></code></pre></div><p>A couple of things to note here. First, I&#39;m taking advantage of julia&#39;s multiple dispatch system. Instead of writing a separate function name for dealing with a <code>LongDNA</code> from <code>BioSequences.jl</code>, I wrote a new <em>method</em> for the same function by adding <code>::LongDNA{N}</code> to the argument.</p><p>This tells julia to call this version of <code>simple_transcribe()</code> whenever the argument is a <code>LongDNA</code>. Otherwise, it will fall back to the original (julia always uses the method that is most specific for its arguments).</p><p>The last thing to note is the <code>{N} ... where N</code>. This is just a way that we can use any DNA alphabet (2 bit or 4 bit), and get similar behavior.</p><h3 id="benchmarks" tabindex="-1">Benchmarks <a class="header-anchor" href="#benchmarks" aria-label="Permalink to &quot;Benchmarks&quot;">‚Äã</a></h3><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BenchmarkTools</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testseq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> randdnaseq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#this is defined in BioSequences</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testseq_str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testseq)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@benchmark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> simple_transcribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testseq)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BenchmarkTools.Trial: 10000 samples with 10 evaluations per sample.</span></span>
<span class="line"><span> Range (min ‚Ä¶ max):  1.391 Œºs ‚Ä¶ 695.413 Œºs  ‚îä GC (min ‚Ä¶ max):  0.00% ‚Ä¶  0.00%</span></span>
<span class="line"><span> Time  (median):     1.855 Œºs               ‚îä GC (median):     0.00%</span></span>
<span class="line"><span> Time  (mean ¬± œÉ):   4.410 Œºs ¬±  10.970 Œºs  ‚îä GC (mean ¬± œÉ):  17.93% ¬± 11.14%</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ‚ñà‚ñÖ‚ñÜ‚ñÇ                     ‚ñÉ‚ñÉ‚ñÅ                                ‚ñÅ</span></span>
<span class="line"><span>  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÜ‚ñá‚ñÑ‚ñÑ‚ñÅ‚ñÅ‚ñÉ‚ñÑ‚ñÉ‚ñÖ‚ñÉ‚ñÖ‚ñÉ‚ñÑ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÑ‚ñÖ‚ñà‚ñà‚ñà‚ñá‚ñÜ‚ñÖ‚ñÑ‚ñÉ‚ñÉ‚ñÅ‚ñÑ‚ñÖ‚ñÖ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÖ‚ñÉ‚ñÖ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÑ‚ñÑ‚ñÑ‚ñÖ ‚ñà</span></span>
<span class="line"><span>  1.39 Œºs      Histogram: log(frequency) by time        47 Œºs &lt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span> Memory estimate: 48.97 KiB, allocs estimate: 4.</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@benchmark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> simple_transcribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LongDNA{2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testseq))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BenchmarkTools.Trial: 10000 samples with 68 evaluations per sample.</span></span>
<span class="line"><span> Range (min ‚Ä¶ max):  835.088 ns ‚Ä¶ 86.832 Œºs  ‚îä GC (min ‚Ä¶ max):  0.00% ‚Ä¶  8.51%</span></span>
<span class="line"><span> Time  (median):       1.102 Œºs              ‚îä GC (median):     0.00%</span></span>
<span class="line"><span> Time  (mean ¬± œÉ):     1.701 Œºs ¬±  2.227 Œºs  ‚îä GC (mean ¬± œÉ):  22.41% ¬± 17.99%</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ‚ñá‚ñà‚ñá‚ñÑ‚ñÉ‚ñÉ‚ñÇ                           ‚ñÇ‚ñÇ‚ñÇ‚ñÅ                       ‚ñÇ</span></span>
<span class="line"><span>  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÖ‚ñÜ‚ñÖ‚ñÅ‚ñÖ‚ñÑ‚ñÉ‚ñÑ‚ñÅ‚ñÉ‚ñÑ‚ñÅ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÉ‚ñÅ‚ñÉ‚ñÑ‚ñÅ‚ñÑ‚ñÜ‚ñÜ‚ñá‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÜ‚ñÖ‚ñÜ‚ñÖ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÖ‚ñÖ‚ñÉ‚ñÜ‚ñà ‚ñà</span></span>
<span class="line"><span>  835 ns        Histogram: log(frequency) by time      11.1 Œºs &lt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span> Memory estimate: 24.53 KiB, allocs estimate: 4.</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@benchmark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> simple_transcribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LongDNA{4}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testseq))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BenchmarkTools.Trial: 10000 samples with 10 evaluations per sample.</span></span>
<span class="line"><span> Range (min ‚Ä¶ max):  1.520 Œºs ‚Ä¶ 760.248 Œºs  ‚îä GC (min ‚Ä¶ max):  0.00% ‚Ä¶  0.00%</span></span>
<span class="line"><span> Time  (median):     2.825 Œºs               ‚îä GC (median):     0.00%</span></span>
<span class="line"><span> Time  (mean ¬± œÉ):   5.131 Œºs ¬±  12.230 Œºs  ‚îä GC (mean ¬± œÉ):  15.77% ¬± 10.16%</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ‚ñÖ‚ñà‚ñá‚ñÑ‚ñÅ                    ‚ñÉ‚ñÇ                                 ‚ñÇ</span></span>
<span class="line"><span>  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñá‚ñÉ‚ñÑ‚ñÖ‚ñÑ‚ñÖ‚ñÑ‚ñÉ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÖ‚ñÅ‚ñÜ‚ñÉ‚ñÑ‚ñÉ‚ñà‚ñà‚ñà‚ñà‚ñá‚ñÜ‚ñÑ‚ñÑ‚ñÉ‚ñÅ‚ñÅ‚ñÉ‚ñÅ‚ñÑ‚ñÅ‚ñÉ‚ñÅ‚ñÅ‚ñÉ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÖ‚ñÜ‚ñÖ‚ñÑ‚ñÑ‚ñÖ ‚ñà</span></span>
<span class="line"><span>  1.52 Œºs      Histogram: log(frequency) by time        48 Œºs &lt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span> Memory estimate: 48.97 KiB, allocs estimate: 4.</span></span></code></pre></div><h3 id="conclusions" tabindex="-1">Conclusions <a class="header-anchor" href="#conclusions" aria-label="Permalink to &quot;Conclusions&quot;">‚Äã</a></h3><p>I&#39;m actually a little surprised that the <code>replace()</code> method does so well, but there you have it. The \`BioJulia method is about 2x faster on a 2-bit sequence (that is, if there&#39;s no ambiguity), but about the same speed on 4-bit sequences.</p>`,26))])}const B=l(p,[["render",E]]);export{F as __pageData,B as default};
